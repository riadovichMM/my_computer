MISC архитектура
16-bit


Регистры:
D - регистр в который будет записано значение после инструкции DATA
R0 - общий регистр
R1 - общий регистр
R2 - общий регистр
MAR - регистр адреса ОЗУ тут будут хранится данные
IAR - регистр адреса ПЗУ тут будут хранится инструкции
JAR - тут будет адрес инструкции который будет записываеться в IAR при выполнении команды JUMP и JZ
KR - keyboard register тут будет хранится код ASCII при нажатии на клавишу
DAR - display adress register тут будет хранится адрес видео памяти


Инструкции:
DATA 100 - команда записи данных литеральных вот чтобы мы могли число на прямую написать мы используем эту команду
MOVE R0 R1 - команда перемещение данных или копирования данных из R1 R0
ADD R0 R1 - команда сложения R0 + R1 => R0 результат запишется в R0
SUB R0 R2 - команда вычетания R0 + R1 => R0 результат запишется в R0

AND R0 R1 - команда логического И R0 + R1 => R0 результат запишется в R0
OR R0 R1 - команда логического ИЛИ 
NOT R0 - команда логического НЕ

LOAD R0 - команда загрузки данных в регистр R0 из памяти
STORE R0 - команда записи данных из регистра R0 в памяти

JUMP - команда безусловного перехода
JZ R0 - команда условного перехода 

D_STORE R0 - команда записи данных в видеобуффер


Формат инструкций:
0000 0000 0000 0000
[opcode 4bit] [reg 0 4bit] [reg 1 4bit] [not used 4bit]

opcode:
DATA - 0001 (opcode)
после DATA идет 16 бит значение

MOVE - 0010
ADD - 0011
SUB - 0100
AND - 0101
OR - 0110
NOT - 0111
LOAD - 1000
STORE - 1001
JUMP - 1010
JZ - 1011
D_STORE - 1100


reg 0, reg 1
NO_REG - 0000
D - 0001
R0 - 0010
R1 - 0011
R2 - 0100
MAR - 0101
IAR - 0110
JAR - 0111
KR - 1000
DAR - 1001

Флаги:
z - zero flag
ng - negative flag
